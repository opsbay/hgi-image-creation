{#
# Copyright (c) 2015, 2016 Genome Research Ltd.
#
# Author: Joshua C. Randall <jcrandall@alum.mit.edu>
#
# This file is part of hgi-ansible.
#
# hgi-ansible is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program. If not, see <http://www.gnu.org/licenses/>.
#
#}
global
        log 127.0.0.1:{{ rsyslog_udp_port }}    local0
        log 127.0.0.1:{{ rsyslog_udp_port }}    local1 notice
        stats socket {{ bamboo_haproxy_admin_sock }} mode 660 level admin
        stats timeout 30s
        daemon

        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        # Default ciphers to use on SSL-enabled listening sockets.
        # For more information, see ciphers(1SSL).
        ssl-default-bind-ciphers kEECDH+aRSA+AES:kRSA+AES:+AES256:RC4-SHA:!kEDH:!LOW:!EXP:!MD5:!aNULL:!eNULL

defaults
        log     global
        mode    http
        option  httplog
        option  dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000

#        errorfile 400 /local/scratch01/hgi/etc/haproxy/errors/400.http
#        errorfile 403 /local/scratch01/hgi/etc/haproxy/errors/403.http
#        errorfile 408 /local/scratch01/hgi/etc/haproxy/errors/408.http
#        errorfile 500 /local/scratch01/hgi/etc/haproxy/errors/500.http
#        errorfile 502 /local/scratch01/hgi/etc/haproxy/errors/502.http
#        errorfile 503 /local/scratch01/hgi/etc/haproxy/errors/503.http
#        errorfile 504 /local/scratch01/hgi/etc/haproxy/errors/504.http


# Template Customization
frontend http-in
        bind *:{{ bamboo_frontend_http_port }}
{#
# marathon app http rules (acl can be host or path based)
#}
{% raw %}
        {{ $services := .Services }}
        {{ range $index, $app := .Apps }} {{ if hasKey $services $app.Id }} {{ $service := getService $services $app.Id }}
        acl {{ $app.EscapedId }}-aclrule {{ $service.Acl}}
        use_backend {{ $app.EscapedId }}-cluster if {{ $app.EscapedId }}-aclrule
        {{ else }}

        # This is the default proxy criteria
        acl {{ $app.EscapedId }}-aclrule path_beg -i {{ $app.Id }}
        use_backend {{ $app.EscapedId }}-cluster if {{ $app.EscapedId }}-aclrule
        {{ end }} {{ end }}
{% endraw %}

        # stats credentials and access path
        stats enable
        stats auth {{ hgi_username }}:{{ hgi_password }}
        stats uri {{ bamboo_haproxy_stats_path }}

# make mesos master available on {{ mesos_master_service_port }}
listen mesos-master-http :{{ mesos_master_service_port }}
        mode http
        option http-keep-alive
	use_backend mesos-master-cluster if TRUE

backend mesos-master-cluster
        balance leastconn
        option http-keep-alive
        option forwardfor
        option httpchk /master/state.json
	# check for health with a regex against state.json
	# such that only the leader will be healthy
        http-check expect rstring ["](leader|pid)["][:]["]master[@]([0-9.:]+)["].*?["](leader|pid)["][:]["]master[@]\2["]
{% for host in groups['mesos-masters'] %}
        server mesos-master-{{ hostvars[host]['ansible_hostname'] }} {{ hostvars[host]['ansible_fqdn'] }}:{{ mesos_master_http_port }} check
{% endfor %}

# make marathon http interface available on {{ marathon_service_port }}
listen marathon-http :{{ marathon_service_port }}
        mode http
	option http-keep-alive
	use_backend marathon-cluster if TRUE

backend marathon-cluster
	balance leastconn
	option http-keep-alive
	option forwardfor
{% for host in groups['marathoners'] %}
	server marathon-{{ hostvars[host]['ansible_hostname'] }} {{ hostvars[host]['ansible_fqdn'] }}:{{ marathon_http_port }} check
{% endfor %}

# make chronos http interface available on {{ chronos_service_port }}
listen chronos-http :{{ chronos_service_port }}
        mode http
	option http-keep-alive
	use_backend chronos-cluster if TRUE

backend chronos-cluster
	balance leastconn
	option http-keep-alive
	option forwardfor
{% for host in groups['chronosians'] %}
	server chronos-{{ hostvars[host]['ansible_hostname'] }} {{ hostvars[host]['ansible_fqdn'] }}:{{ chronos_http_port }} check
{% endfor %}

# make bamboo http interface available on {{ bamboo_service_port }}
listen bamboo-http :{{ bamboo_service_port }}
        mode http
	option http-keep-alive
	use_backend bamboo-cluster if TRUE

backend bamboo-cluster
	balance leastconn
	option http-keep-alive
	option forwardfor
{% for host in groups['bamboosians'] %}
	server bamboo-{{ hostvars[host]['ansible_hostname'] }} {{ hostvars[host]['ansible_fqdn'] }}:{{ bamboo_http_port }} check
{% endfor %}

{#
# marathon per-app backend
#}
{% raw %}
{{ range $index, $app := .Apps }}
backend {{ $app.EscapedId }}-cluster{{ if $app.HealthCheckPath }}
        option httpchk GET {{ $app.HealthCheckPath }}
        {{ end }}
        balance leastconn
        option httpclose
        option forwardfor
        {{ range $page, $task := .Tasks }}
        server {{ $app.EscapedId}}-{{ $task.Host }}-{{ $task.Port }} {{ $task.Host }}:{{ $task.Port }} {{ if $app.HealthCheckPath }} check inter 30000 {{ end }} 
	{{ end }}
{{ end }}
{% endraw %}

{#
# marathon per-port tcp rules
#}
{% raw %}
{{ $apps := .Apps }}
{{ range $port := ($apps | getAppEnvValues "BAMBOO_TCP_PORT") }}
# Listener for TCP port {{ $port }}
listen marathon-app-tcp-{{ $port }}-cluster-tcp :{{ $port }}
        mode tcp
        option tcplog
        balance roundrobin
        use_backend marathon-app-tcp-{{ $port }}-cluster if TRUE

# Backend for TCP port {{ $port }}
backend marathon-app-tcp-{{ $port }}-cluster
        {{ range $appindex, $app := $apps }} {{ if $app.Env.BAMBOO_TCP_PORT }}{{ if eq $app.Env.BAMBOO_TCP_PORT $port }} {{ range $page, $task := .Tasks }}
        server {{ $app.EscapedId}}-{{ $task.Host }}-{{ $task.Port }} {{ $task.Host }}:{{ $task.Port }} {{ if $app.HealthCheckPath }} check inter 30000 {{ end }}
        {{ end }} {{ end }} {{ end }} {{ end }}

{{ end }}
{% endraw %}


{#
# marathon app service ports
#}
{% raw %}
##
## map service ports of marathon apps
## ( see https://mesosphere.github.io/marathon/docs/service-discovery-load-balancing.html#ports-assignment ))
## to haproxy frontend port
##
{{ range $index, $app := .Apps }}
#listen {{ $app.EscapedId }}_{{ $app.ServicePort }}
#   bind *:{{ $app.ServicePort }}
#   mode http
   {{ if $app.HealthCheckPath }}
#   option httpchk GET {{ $app.HealthCheckPath }}
   {{ end }}
#   balance leastconn
#   option forwardfor
         {{ range $page, $task := .Tasks }}
#         server {{ $app.EscapedId}}-{{ $task.Host }}-{{ $task.Port }} {{ $task.Host }}:{{ $task.Port }} {{ if $app.HealthCheckPath }} check inter 30000 {{ end }} 
	 {{ end }}
{{ end }}
{% endraw %}
